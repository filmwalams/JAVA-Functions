// total factors= how many total factors(not distinct) of any given number
// prime = smallest prime divisible by i is stored in prime[i]
// example totalfactors[100]=4 and prime[100]=2 
// works for n=10^7 in 0.5seconds
public static int totalFactor(int n)
{
        int[] totalfactors=new int[n+1],prime=new int[n+1];
        for(int i=2;i<=n;i++)
        {
                if(prime[i]==0)prime[i]=i;
                if(prime[i]==i)
                {
                        for(int j=i*i;j<=n;j+=i)
                        {
                                if(j<0)break;
                                if(prime[j]==0)prime[j]=i;
                        }
                }
                totalfactors[i]=totalfactors[i/prime[i]]+1;
                
        }
        return totalfactors;
}       

// store prime number upto n
static ArrayList<Integer> prime;
public static void sieve(int n)
{
        int primes[]=new int[n+1];
        prime=new ArrayList<Integer>();
        for(int i=2;i<=n;i++)
        {
                if(primes[i]==0)
                {
                        primes[i]=1;
                        prime.add(i);
                        for(int k=i+i;k<=n;k+=i)
                        {
                                primes[k]=2;
                        }
                }
        }
            
            
}

// work upto n=10^16 under 1 second time limit.
public static long largestPrimeFactor(long n)
{
        int sq=(int)Math.sqrt(n);
        long ans=1;
        for(int i=0;prime.get(i)<=sq;i++)
        {
              if(n%prime.get(i)==0)
              {
                      while(n%prime.get(i)==0)
                      {
                              n/=prime.get(i);
                      }
                      ans=prime.get(i);
              }
              if(n<2)break;
        }
        if(n>1)return n;
        else return ans;
}

public static boolean isPrime(int number)
{   
        if(number<=1)return false;
        else if(number == 2) return true;
        else if(number % 2 == 0) return false;
        int root = (int)Math.sqrt((double)number);
        for (int i = 3; i <= root; i += 2)
        {
            if (number % i == 0) return false;
        }
        return true;
}
