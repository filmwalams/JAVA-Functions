        // rb()-> readByte()
        // ni()-> nextInt()
        // nl()-> nextLong()
        // ns()-> nextString()
        // nc()-> nextChar()
        // nd()-> nextDouble()
        // nia(int size)-> nextIntegerArray(int size)
        // nla(int size)-> nextLongArray(int size)
        // similarly nda,nsa and nca for double, string and char array
        // niaindex(int size)-> nextIntArraywithIndex(int size)  useful for restoring initial indexes after sorting
        // similarly nlaindex() for longArraywithindex
        
        
        static PrintWriter out;
        static int Space;// If Space=0 means take string input upto space. Space=1 take string input upto new line
        public static void printTime(Object ...obj){if(TESTCASES.length()!=0)System.err.println(Arrays.deepToString(obj));}
        static InputStream is;
        static BufferedReader brr;
        protected static byte[] inbuf = new byte[1024];
        static int lbuffer = 0, pbuffer = 0;
        public static void init(InputStream input) {Space=0;is=input;brr=new BufferedReader(new InputStreamReader(input));out=new PrintWriter(new OutputStreamWriter(System.out));}
        // Fundamental
        protected static int rb(){if(lbuffer == -1)throw new InputMismatchException();if(pbuffer >= lbuffer){pbuffer = 0;try { lbuffer = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }if(lbuffer <= 0)return -1;}return inbuf[pbuffer++];}       
        protected static String line() throws IOException{return brr.readLine();}   
        protected static boolean isSpace(int c) { return !(c >= 33 && c <= 126); }
        protected static int skip(){ int b; while((b = rb()) != -1 && isSpace(b)); return b; }
        // Inputs
        protected static double nd() throws IOException { return Double.parseDouble(ns()); }
        protected static char nc() { return (char)skip(); }
        protected static String ns() throws IOException{if(Space==1)return line();int b = skip();StringBuilder sb = new StringBuilder();while(!(isSpace(b))){ sb.appendCodePoint(b);b = rb();}return sb.toString();}
        protected static char[] nca(int n){char[] buf = new char[n];int b = skip(), p = 0;while(p < n && !(isSpace(b))){buf[p++] = (char)b;b = rb();} return n == p ? buf : Arrays.copyOf(buf, p);}
        protected static int[] nia(int n) throws IOException{int[] a = new int[n];for(int i = 0;i < n;i++)a[i] = ni();return a;}
        protected static int[][] niaindex(int n) throws IOException{int ea[][]=new int[n][2];for(int i=0;i<n;i++){ea[i][0]=ni();ea[i][1]=i;}return ea;}
        protected static long[] nla(int n) throws IOException{long[] a = new long[n];for(int i = 0;i < n;i++)a[i] = nl();return a;}
        protected static long[][] nlaindex(int n) throws IOException{long ea[][]=new long[n][2];for(int i=0;i<n;i++){ea[i][0]=ni();ea[i][1]=i;}return ea;}
        protected static String[] nsa(int n) throws IOException{String[] a = new String[n];for(int i = 0;i < n;i++)a[i] = ns();return a;    }
        protected static double[] nda(int n) throws IOException{double[] a = new double[n];for(int i = 0;i < n;i++)a[i] = nd();return a;}
        protected static int ni() throws IOException{if(Space==1)return Integer.parseInt(line());int num=0,b;boolean minus = false;while((b = rb())!= -1 && !((b>='0'&&b<='9') || b =='-'));if(b =='-'){minus=true;b = rb();    }while(true){if(b >= '0' && b <= '9'){num = num * 10 + (b - '0');}else{return minus ? -num : num;}b = rb();}}  
        protected static long nl() throws IOException{if(Space==1)return Long.parseLong(line());long num = 0;int b;boolean minus = false;while((b = rb()) != -1 && !((b >= '0' && b <= '9') || b == '-'));if(b == '-'){   minus = true;b = rb();}while(true){if(b >= '0' && b <= '9'){num = num * 10 + (b - '0');}else{return minus ? -num : num;}b = rb();}}
        // Outputs
        public static void pln(){out.println();}
        public static void ps(String s){out.print(s);}
        public static void pi(int s){out.print(s);}
        public static void pl(long s){out.print(s);}
        public static void pd(double s){out.print(s);}
        public static void psp(){out.print(" ");}
        public static void parr(int s[]){out.println(Arrays.toString(s));}
        public static void parr(String s[]){out.println(Arrays.toString(s));}
        public static void parr(long s[]){out.println(Arrays.toString(s));}        
        public static void parr2(int s[][]){for(int i=0;i<s.length;i++)out.println(Arrays.toString(s[i]));}
        public static void parr2(long s[][]){for(int i=0;i<s.length;i++)out.println(Arrays.toString(s[i]));}
        public static void parr2(String s[][]){for(int i=0;i<s.length;i++)out.println(Arrays.toString(s[i]));}
